@page "/nitroxcalculator"
@using NitroxAndTrimixCalculatorLibrary
@using NitroxAndTrimixCalculatorLibrary.Object
@using System.Globalization
@using NitroxCalculatorMaui.Class

<h1>Nitrox Calculator</h1>

<div class="row">
    <div class="col-sm-4 col-lg-3 rightAlign">Starting Pressure (@calculator.SelectedUnit.PressureName):</div>
    <div class="col-sm-7 col-md-6">
        <input @bind-value="StartPressure" @bind-value:event="oninput" class="fullWidth" min="0" type="number" />
    </div>
</div>
<div class="row">

    <div class="col-sm-4 col-lg-3 rightAlign">Maximum Oxygen Pressure (@calculator.SelectedUnit.PressureName):</div>
    <div class="col-sm-7 col-md-6">
        <input class="fullWidth" @bind-value="MaxO2Pressure" @bind-value:event="oninput" type="number" min="0" />
    </div>
</div>
<div class="row">
    <div class="col-sm-4 col-lg-3 rightAlign">Starting Mix:</div>
    <div class="col-sm-7 col-md-6">
        <input class="fullWidth" @bind-value="StartMix" @bind-value:event="oninput" type="number" min="0" max="100" />
        <input type="range" min="0" max="100" @bind-value="StartMix" @bind-value:event="oninput" class="form-range">
    </div>
</div>
<br />
<div class="row">
    <div class="col-sm-4 col-lg-3 rightAlign">Ending Pressure (@calculator.SelectedUnit.PressureName):</div>
    <div class="col-sm-7 col-md-6">
        <input class="fullWidth" @bind-value="EndPressure" @bind-value:event="oninput" type="number" min="0" />
    </div>
</div>
<div class="row">
    <div class="col-sm-4 col-lg-3 rightAlign">Ending Mix:</div>
    <div class="col-sm-7 col-md-6">
        <input class="fullWidth" @bind-value="EndMix" @bind-value:event="oninput" type="number" min="0" max="100" />
        <input type="range" min="0" max="100" @bind-value="EndMix" @bind-value:event="oninput" class="form-range">
    </div>
</div>
<br />
<button class="btn btn-primary" @onclick="CalculateMix">Calculate</button>
<button class="btn btn-secondary" @onclick="AirTopOff">Air Top Off</button>

<br />
<br />
<p>@output</p>

@code
{
    private NitroxMixCalculator calculator;
    private double startPressure = 500;
    private double startMix = 32;
    private double endPressure = 3400;
    private double endMix = 32;
    private double maxO2Pressure = 4500;
    private MarkupString output;
    private MixResult result = new();

    public string StartPressure
    {
        get => startPressure.ToString(CultureInfo.InvariantCulture);
        set
        {
            double.TryParse(value, out double pressure);
            startPressure = pressure;
            CalculateMix();
        }
    }

    public string StartMix
    {
        get => startMix.ToString(CultureInfo.InvariantCulture);
        set
        {
            double.TryParse(value, out double mix);
            startMix = mix;
            CalculateMix();
        }
    }

    public string EndMix
    {
        get => endMix.ToString(CultureInfo.InvariantCulture);
        set
        {
            double.TryParse(value, out double mix);
            endMix = mix;
            CalculateMix();
        }
    }

    public string EndPressure
    {
        get => endPressure.ToString(CultureInfo.InvariantCulture);
        set
        {
            double.TryParse(value, out double pressure);
            endPressure = pressure;
            CalculateMix();
        }
    }

    public string MaxO2Pressure
    {
        get => maxO2Pressure.ToString(CultureInfo.InvariantCulture);
        set
        {
            double.TryParse(value, out double pressure);
            maxO2Pressure = pressure;
            CalculateMix();
        }
    }

    protected override void OnInitialized() // = On Page Load
    {
        calculator = new();
        calculator.LoadUnit(AppSettings.SelectedUnit);

        calculator.SelectedUnit.PressureBar = AppSettings.StartPressure;
        startPressure = calculator.SelectedUnit.Pressure;

        calculator.SelectedUnit.PressureBar = AppSettings.EndPressure;
        endPressure = calculator.SelectedUnit.Pressure;

        calculator.SelectedUnit.PressureBar = AppSettings.MaxOxygenPressure;
        maxO2Pressure = calculator.SelectedUnit.Pressure;

        startMix = AppSettings.StartMix;
        endMix = AppSettings.EndMix;

        CalculateMix();
    }

    private void AirTopOff()
    {
        MixInputs input = LoadMixInputs();

        if (!input.EndPressureLarger)
        {
            output = new MarkupString("Start Pressure higher then End Pressure");
            return;
        }

        endMix = Math.Round(calculator.TopUp(input), 1);
        CalculateMix();
    }

    private void CalculateMix()
    {
        string textResult = string.Empty;
        MixInputs input = LoadMixInputs();

        result = calculator.CalculateMix(input);

        double pressure = Math.Round(result.Inputs.StartPressure);
        if (result.RemoveGas > 0)
        {
            pressure -= Math.Round(result.RemoveGas);
            textResult += "Drain " + Math.Round(result.RemoveGas) + " " + calculator.SelectedUnit.PressureName + " from the tank to " + pressure + " " + calculator.SelectedUnit.PressureName + "<br>";
        }
        if (result.AddOxygen > 0)
        {
            pressure += Math.Round(result.AddOxygen);
            textResult += "Add " + Math.Round(result.AddOxygen) + " " + calculator.SelectedUnit.PressureName + " of Oxygen to " + pressure + " " + calculator.SelectedUnit.PressureName + "<br>";
        }
        if (result.AddTopOffGas() > 0)
            textResult += "Add " + Math.Round(result.AddTopOffGas()) + " " + calculator.SelectedUnit.PressureName + " of " + result.Inputs.GetTopOffGasName + " to " + result.Inputs.EndPressure + " " + calculator.SelectedUnit.PressureName + "<br>";

        if (result.ValidMix())
            textResult = "Not Possible with selected Inputs" + "<br>";
        else
            textResult += GetMod(result.Inputs.EndMix);
        output = new(textResult);
    }

    private string GetMod(double o2Percent)
    {
        string textResult = AppSettings.P02List.Aggregate("<br><br>", (current, p02) => current + ($"Max Depth at {p02}: " + calculator.MaxOperatingDepthCalculator(o2Percent, p02) + " " + result.SelectedUnit.DepthName + "<br>"));
        return textResult;
    }

    private MixInputs LoadMixInputs()
    {
        if (startMix > 100)
            startMix = 100;

        MixInputs input = new()
            {
                EnableMaxOxygenPressure = true,
                StartPressure = startPressure,
                MaxOxygenPressure = maxO2Pressure,
                StartMix = startMix,
                EndPressure = endPressure,
                EndMix = endMix
            };

        startPressure = Math.Round(input.StartPressure);
        startMix = Math.Round(input.StartMix, 1);
        endPressure = Math.Round(input.EndPressure);
        endMix = Math.Round(input.EndMix, 1);
        maxO2Pressure = Math.Round(input.MaxOxygenPressure);

        return input;
    }
}
